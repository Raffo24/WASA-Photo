openapi: 3.0.3
info:
  title: WASAPhoto API
  description: API to create a Bearer Authentication Token with OpenAPI 3.0
  version: 1.0.0
tags:
  - name: "API management"
    description: "API management"
  - name: "user management"
    description: "user management"
  - name: "feed stream"
    description: "feed stream"
  - name: user info
    description: user info
  - name: social network
    description: social network
  - name: photos
    description: photos
servers:
  - url: http://localhost:8080
    description: Local Server
paths:
    /:
      get:
        tags:
          - API management
        summary: Get the API status
        description: Get the API status
        operationId: getApiStatus
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiStatus'
                examples:
                  apiStatus:
                    $ref: '#/components/examples/ApiStatus'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiError'
                examples:
                  apiError:
                    $ref: '#/components/examples/ApiError'
    /login:
      post:
        tags:
          - user management
        summary: Logs in the user
        description: If the user not exist,
          it will be created and
          an identification token will be returned
          if the user exist, the user identifier will be returned
        operationId: doLogin
        requestBody:
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          required: true
        responses:
          201:
            description: User log-in action successful
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Token"
          400:  
            description: Invalid username/password supplied
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/userNotFound"
          404:
            description: User not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/userNotFound"
          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ApiError"
    /feed:
      get:
        tags:
          - feed stream
        summary: Get feed
        description: Get the feed of the user
        operationId: getFeed
        security:
          - bearerAuth: []
        responses:
          200:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Photo"
          400:
            description: Invalid User
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/userNotFound"
          404:
            description: User not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/userNotFound"
          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ApiError"
    /users/{id}:
      get:
        tags:
          - user info
        summary: Get User Profile
        description: Get a user profile
        operationId: getUserProfile
        security:
          - bearerAuth: []
        parameters:
          - name: id
            in: path
            description: id of the user that needs to be fetched
            required: true
            schema:
              type: string
              minLength: 5
              maxLength: 5
              pattern: "[A-Za-z0-9]*"
        responses:
          201:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
          400:
            description: Invalid id supplied
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/userNotFound"
          404:
            description: User not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/userNotFound"
          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ApiError"
      put:
        tags:
          - user info
        summary: Update User Profile
        description: Update a user profile
        operationId: updateUserProfile
        parameters:
          - name: id
            in: path
            description: id of the user that needs to be updated
            required: true
            schema:
              type: string
              minLength: 5
              maxLength: 5
              pattern: "[A-Za-z0-9]*"
        requestBody:
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          required: true
        security:
          - bearerAuth: []
        responses:
          201:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
          400:
            description: Invalid id supplied
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/userNotFound"
          404:
            description: User not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/userNotFound"
          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ApiError"
    /users/{id}/follow:
      post:
        tags:
          - social network
        summary: Follow User
        description: Follow a user
        operationId: followUser
        parameters:
          - name: id
            in: path
            description: id of the user that needs to be followed
            required: true
            schema:
              type: string
              pattern: "[A-Za-z0-9]*"
              minLength: 5
              maxLength: 5
        security:
          - bearerAuth: []
        responses:
          201:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
          400:
            description: Invalid id supplied
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/userNotFound"
          404:
            description: User not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/userNotFound"
          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ApiError"
      delete:
        tags:
          - social network
        summary: Unfollow User
        description: Unfollow a user
        operationId: unfollowUser
        parameters:
          - name: id
            in: path
            description: id of the user that needs to be unfollowed
            required: true
            schema:
              type: string
              pattern: "[A-Za-z0-9]*"
              minLength: 5
              maxLength: 5
        security:
          - bearerAuth: []
        responses:
          200:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
          400:
            description: Invalid id supplied
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/userNotFound"
          404:
            description: User not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/userNotFound"
          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ApiError"
    /users/{id}/ban:
      post:
        tags:
          - social network
        summary: Ban User
        description: Ban a user
        operationId: banUser
        parameters:
          - name: id
            in: path
            description: id that wants to ban another user
            required: true
            schema:
              type: string
              pattern: "[A-Za-z0-9]*"
              minLength: 5
              maxLength: 5
        security:
          - bearerAuth: []
        responses:
          201:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
          400:
            description: Invalid id supplied
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/userNotFound"
          404:
            description: User not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/userNotFound"
          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ApiError"
      delete:
        tags:
          - social network 
        summary: Unban User
        description: Unban a user
        operationId: unbanUser
        parameters:
          - name: id
            in: path
            description: id that wants to unban another user
            required: true
            schema:
              type: string
              pattern: "[A-Za-z0-9]*" 
              minLength: 5
              maxLength: 5
        security:
          - bearerAuth: []
        responses:
          200:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
          400:
            description: Invalid id supplied
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/userNotFound"
          404:
            description: User not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/userNotFound"
          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ApiError"
    /users/{id}/photos:
      get:
        tags:
          - user info
        summary: Get User Photos
        description: Get a user photos
        operationId: getUserPhotos
        parameters:
          - name: id
            in: path
            description: id of the user that needs to be fetched
            required: true
            schema:
              type: string
              pattern: "[A-Za-z0-9]*"
              minLength: 5
              maxLength: 5
        security:
          - bearerAuth: []
        responses:
          200:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Photo"
          400:
            description: Invalid id supplied
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/userNotFound"
          404:
            description: User not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/userNotFound"
          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ApiError"
    /users/search/{username}:
      get:
        tags:
          - user management
        summary: Search User
        description: Search a user by username
        operationId: getMyUserName
        parameters:
          - name: username
            in: path
            description: username of the user that needs to be fetched
            required: true
            schema:
              type: string
              pattern: "[A-Za-z0-9]*"
              minLength: 5
              maxLength: 5
        responses:
          200:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
          400:
            description: Invalid username supplied
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/userNotFound"
          404:
            description: User not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/userNotFound"
          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ApiError"
    /photos:
      post:
        tags:
          - photos
        summary: Upload Photo
        description: Upload a new photo
        operationId: uploadPhoto
        requestBody:
          content:
            multipart/form-data:
              schema:
                $ref: "#/components/schemas/Photo"
          required: true
        security:
          - bearerAuth: []
        responses:
          201:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Photo"
          400:
            description: Invalid photo
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/photoNotFound"
          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ApiError"

    /photos/{id}:
      get:
        tags:
            - photos
        summary: Get Photo
        description: Get a photo
        operationId: getPhoto
        parameters:
          - name: id
            in: path
            description: ID of the photo that needs to be fetched
            required: true
            schema:
              type: string
              pattern: "[A-Za-z0-9]*"
              minLength: 5
              maxLength: 5
        security:
          - bearerAuth: []
        responses:
          200:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Photo"
          400:
            description: Invalid photo ID supplied
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/photoNotFound"
          404:
            description: Photo not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/photoNotFound"
          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ApiError"
      delete:
        tags:
          - photos
        summary: Delete Photo
        description: Delete a photo
        operationId: deletePhoto
        parameters:
          - name: id
            in: path
            description: ID of the photo that needs to be deleted
            required: true
            schema:
              type: string
              pattern: "[A-Za-z0-9]*"
              minLength: 5
              maxLength: 5
        security:
          - bearerAuth: []
        responses:
          200:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Photo"
          400:
            description: Invalid photo ID supplied
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/photoNotFound"
          404:
            description: Photo not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/photoNotFound"
          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ApiError"
    /photos/{id}/like:
      post:
        tags:
          - photos
        summary: Like Photo
        description: Like a photo
        operationId: likePhoto
        parameters:
          - name: id
            in: path
            description: ID of the photo that needs to be liked
            schema:
              type: string
              pattern: "[A-Za-z0-9]*"
              minLength: 5
              maxLength: 5
            required: true
        security:
          - bearerAuth: []
        responses:
          201:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Photo"
          400:
            description: Invalid photo id supplied
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/photoNotFound"
          404:
            description: Photo not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/photoNotFound"
          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ApiError"
      delete:
        tags:
          - photos
        summary: Unlike Photo
        description: Unlike a photo
        operationId: unlikePhoto
        parameters:
          - name: id
            in: path
            description: id of the photo that needs to be unliked
            required: true
            schema:
              type: string
              pattern: "[A-Za-z0-9]*"
              minLength: 5
              maxLength: 5
        security:
          - bearerAuth: []
        responses:
          200:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Photo"
          400:
            description: Invalid photo id supplied
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/photoNotFound"
          404:
            description: Photo not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/photoNotFound"
          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ApiError"
    /photos/{id}/comments:
      get:
        tags:
          - photos
        summary: Get Photo Comments
        description: Get comments for a photo
        operationId: getPhotoComments
        parameters:
          - name: id
            in: path
            description: id of the photo that needs to be fetched
            required: true
            schema:
              type: string
              pattern: "[A-Za-z0-9]*"
              minLength: 5
              maxLength: 5
        security:
          - bearerAuth: []
        responses:
          200:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Comment"
          400:
            description: Invalid photo id or comment supplied
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/commentNotFound"
          404:
            description: Photo or comment not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/commentNotFound"
          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ApiError"
      post:
        tags:
          - photos
        summary: Post Photo Comment
        description: Post a comment for a photo
        operationId: postPhotoComment
        parameters:
          - name: id
            in: path
            description: id of the photo that needs to be commented
            required: true
            schema:
              type: string
              pattern: "[A-Za-z0-9]*"
              minLength: 5
              maxLength: 5
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        security:
          - bearerAuth: []
        responses:
          201:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Comment"
          400:
            description: Invalid photo id supplied
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/photoNotFound"
          404:
            description: Photo not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/photoNotFound"
          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ApiError"
    /photos/{photoId}/comments/{commentId}:
      get:
        tags:
          - photos
        summary: Get Photo Comment
        description: Get a comment for a photo
        operationId: getPhotoComment
        parameters:
          - name: photoId
            in: path
            description: id of the photo that needs to be fetched
            required: true
            schema:
              type: string
              pattern: "[A-Za-z0-9]*"
              minLength: 5
              maxLength: 5
          - name: commentId
            in: path
            description: id of the comment that needs to be fetched
            required: true
            schema:
              type: string
              pattern: "[A-Za-z0-9]*"
              minLength: 5
              maxLength: 5
        security:
          - bearerAuth: []
        responses:
          200:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Comment"
          400:
            description: Invalid photo id supplied
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/commentNotFound"
          404:
            description: Photo not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/commentNotFound"
          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ApiError"
      delete:
        tags:
          - photos
        summary: Delete Photo Comment
        description: Delete a comment for a photo
        operationId: deletePhotoComment
        parameters:
          - name: photoId
            in: path
            description: ID of the photo that needs to be commented
            required: true
            schema:
              type: string
              pattern: "[A-Za-z0-9]*"
              minLength: 5
              maxLength: 5
          - name: commentId
            in: path
            description: ID of the comment that needs to be deleted
            required: true
            schema:
              type: string
              pattern: "[A-Za-z0-9]*"
              minLength: 5
              maxLength: 5
        security:
          - bearerAuth: []
        responses:
          200:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Comment"
          400:
            description: Invalid photoId or commentId supplied
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/commentNotFound"
          404:
            description: Photo or comment not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/commentNotFound"
          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ApiError"
    /photos/{photoId}/comments/{commentId}/like:
      post:
        tags:
          - photos
        summary: Like Photo Comment
        description: Like a comment for a photo
        operationId: likePhotoComment
        parameters:
          - name: photoId
            in: path
            description: ID of the photo that needs to be commented
            required: true
            schema:
              type: string
              pattern: "[A-Za-z0-9]*"
              minLength: 5
              maxLength: 5
          - name: commentId
            in: path
            description: ID of the comment that needs to be liked
            required: true
            schema:
              type: string
              pattern: "[A-Za-z0-9]*"
              minLength: 5
              maxLength: 5
        security:
          - bearerAuth: []
        responses:
          201:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Comment"
          400:
            description: Invalid photoId or commentId supplied
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/commentNotFound"
          404:
            description: Photo or comment not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/commentNotFound"
          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ApiError"
      delete:
        tags:
          - photos
        summary: Unlike Photo Comment
        description: Unlike a comment for a photo
        operationId: unlikePhotoComment
        parameters:
          - name: photoId
            in: path
            description: ID of the photo that needs to be commented
            required: true
            schema:
              type: string
              pattern: "[A-Za-z0-9]*"
              minLength: 5
              maxLength: 5
          - name: commentId
            in: path
            description: ID of the comment that needs to be unliked
            required: true
            schema:
              type: string
              pattern: "[A-Za-z0-9]*"
              minLength: 5
              maxLength: 5
        security:
          - bearerAuth: []
        responses:
          200:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Comment"
          400:
            description: Invalid photoId or commentId supplied
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/commentNotFound"
          404:
            description: Photo or comment not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/commentNotFound"
          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ApiError"
components:
  securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: integer
  examples:
    ApiStatus:
      value:
        status: "OK"
        message: "API is up and running"
    ApiError:
      value:
        status: "ERROR"
        message: "API is down"
  schemas:
    ApiStatus:
      description: Status of the API
      type: string
      pattern: ".*"
      minLength: 2
      maxLength: 20
      example: "OK"
    ApiError:
      type: string
      pattern: ".*"
      minLength: 4
      maxLength: 20
      description: Error message
      example: "Api Error"
    userNotFound:
      type: string
      pattern: ".*"
      minLength: 4
      maxLength: 40
      description: Error message
      example: "User not found"
    commentNotFound:
      type: string
      pattern: ".*"
      minLength: 4
      maxLength: 40
      description: Error message
      example: "Photo or Comment not found"
    photoNotFound:
      type: string 
      pattern: ".*"
      minLength: 4
      maxLength: 40
      description: Error message
      example: "Photo not found"
      
    Photo:
      type: object
      description: photo object
      properties:
        id:
          type: string
          pattern: "[A-Za-z0-9]*"
          minLength: 5
          maxLength: 5
          description: ID of the photo
          example: "12131"
        title:
          type: string
          pattern: ".*"
          minLength: 1
          maxLength: 20
          description: Title of the photo
          example: "The photo title"
        description:
          type: string
          pattern: ".*"
          minLength: 0
          maxLength: 300
          description: Description of the photo
          example: "The photo description"
    Comment:
      type: object
      description: comment of the photo
      properties:
        id:
          type: string
          pattern: "[A-Za-z0-9]*"
          minLength: 5
          maxLength: 5
          description: ID of the comment
          example: "13123"
        text:
          type: string
          pattern: ".*"
          minLength: 1
          maxLength: 300
          description: Text of the comment
          example: "The comment text"
    User:
      description: user data
      type: object
      properties:
        id:
          type: string
          pattern: "[A-Za-z0-9]*"
          minLength: 5
          maxLength: 5
          description: ID of the user
          example: "32112"
        username:
          type: string
          pattern: "[A-Za-z0-9]*"
          description: Username of the user
          example: "Maria"
          minLength: 3
          maxLength: 16
    Token:
      description: Token data
      type: object
      properties:
        token:
          type: string
          pattern: "[A-Za-z0-9]*"
          description: Token of the user
          example: "3211232321"
          minLength: 3
          maxLength: 16
      